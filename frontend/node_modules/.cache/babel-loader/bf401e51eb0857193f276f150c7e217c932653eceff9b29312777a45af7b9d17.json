{"ast":null,"code":"var _jsxFileName = \"/Users/ziann/Desktop/favourite-restaurants/src/pages/AddRestaurant.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport igLogo from \"../assets/igLogo.png\";\nimport \"./AddRestaurant.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddRestaurant = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [inputUrl, setInputUrl] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"autofill-button\",\n      onClick: () => setIsModalOpen(true),\n      children: [\"Autofill with \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: igLogo,\n        alt: \"Instagram\",\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      onClick: () => setIsModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is some normal text inside the modal. You can use this space to display information or instructions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputUrl,\n          onChange: () => setInputValue(e.target.value),\n          className: \"modal-input\",\n          placeholder: \"Enter text here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_s(AddRestaurant, \"mF4XcBaINPYXPs5NcrijSEJzK9s=\");\n_c = AddRestaurant;\nexport default AddRestaurant;\nvar _c;\n$RefreshReg$(_c, \"AddRestaurant\");","map":{"version":3,"names":["useState","igLogo","jsxDEV","_jsxDEV","AddRestaurant","_s","isModalOpen","setIsModalOpen","inputUrl","setInputUrl","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","setInputValue","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/ziann/Desktop/favourite-restaurants/src/pages/AddRestaurant.js"],"sourcesContent":["import { useState } from \"react\";\nimport igLogo from \"../assets/igLogo.png\";\nimport \"./AddRestaurant.css\";\n\nconst AddRestaurant = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [inputUrl, setInputUrl] = useState('');\n  return (\n    <div className=\"container\">\n      <button className=\"autofill-button\" onClick={() => setIsModalOpen(true)}>\n        Autofill with <img src={igLogo} alt=\"Instagram\" className=\"icon\" />\n      </button>\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={() => setIsModalOpen(false)}>\n          <div className=\"modal-content\">\n            <p>\n              This is some normal text inside the modal. You can use this space\n              to display information or instructions.\n            </p>\n            <input\n              type=\"text\"\n              value={inputUrl}\n              onChange={() => setInputValue(e.target.value)}\n              className=\"modal-input\"\n              placeholder=\"Enter text here\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddRestaurant;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,oBACEG,OAAA;IAAKO,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBR,OAAA;MAAQO,SAAS,EAAC,iBAAiB;MAACE,OAAO,EAAEA,CAAA,KAAML,cAAc,CAAC,IAAI,CAAE;MAAAI,QAAA,GAAC,gBACzD,eAAAR,OAAA;QAAKU,GAAG,EAAEZ,MAAO;QAACa,GAAG,EAAC,WAAW;QAACJ,SAAS,EAAC;MAAM;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,EACRZ,WAAW,iBACVH,OAAA;MAAKO,SAAS,EAAC,eAAe;MAACE,OAAO,EAAEA,CAAA,KAAML,cAAc,CAAC,KAAK,CAAE;MAAAI,QAAA,eAClER,OAAA;QAAKO,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BR,OAAA;UAAAQ,QAAA,EAAG;QAGH;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJf,OAAA;UACEgB,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEZ,QAAS;UAChBa,QAAQ,EAAEA,CAAA,KAAMC,aAAa,CAACC,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE;UAC9CV,SAAS,EAAC,aAAa;UACvBe,WAAW,EAAC;QAAiB;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACb,EAAA,CA3BID,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AA6BnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}